### DEMO 0-A: P2P, Ad-Hoc Network, Programmatic Configuration

To execute the system, simply run (in any order):

- Demo0A_MainProgram_Subsys1
- Demo0A_MainProgram_Subsys2

Each main program will start a subsystem according to configuration.

You should expect the system to stabilize with the following state

- Dev 1 => 3
- Dev 2 => 2
- Dev 3 => 1
- Dev 4 => 2
- Dev 5 => 1


### DEMO 0-B: P2P, Ad-Hoc Network, Configuration by File

To execute the system, simply run (in any order):

- Demo0B_MainProgram_Subsys1
- Demo0B_MainProgram_Subsys2

Each main program will start a subsystem according to configuration.

You should expect the system to stabilize with the following state

- Dev 1 => 3
- Dev 2 => 2
- Dev 3 => 1
- Dev 4 => 2
- Dev 5 => 1


### DEMO 0-C: P2P, Ad-Hoc Network, Configuration by Cmd-line

The single main program, "Demo0C_MainProgram", is used to start any subsystem,
depending on the command-line arguments.

For examples, here are 2 run configurations (used to create two subsystems):

1) --program "demos.Demo0C_AggregateProgram" -h 127.0.0.1 -p 9000
   -e 1:2,4;2;3 --subsystems 127.0.0.1:9500:4:5
2) --program "demos.Demo0C_AggregateProgram" -h 127.0.0.1 -p 9500
   -e 4;5

Each configuration tells where the subsystem has to be deployed via
 options "-h" (host), and "-p" (port).

The "-e" option is used to specify the elements of the current subsystem and their neighbours.
Elements are separated by ";" and, for each element, a comma-separated list of neighbours can be
 specified after ":". In the example, "1:2,4;2;3" means that the subsystem consists of
 three elements: 1,2,3; and element 1 has neighbours 2 and 4.

For what concerns the other subsystems, they are specified with "--subsystems".
 This is only used if one needs to specify the location of neighbours
  (the other subsystems can be left out).
 The format is "<subsys1>;<subsys2>;..." where the subsystem specification
 has format "host:port:elem1:elem2:...".

By default in the P2P scenario, the devices are autonomous (no global scheduling), and
have an interval of 1 second between two computations.

You should expect the system to stabilize with the following state

- Dev 1 => 3
- Dev 2 => 2
- Dev 3 => 1
- Dev 4 => 2
- Dev 5 => 1


### DEMO 1: Server, Ad-Hoc Network

Three run configurations: "1" for the server, "2 and 3" for the subsystems

1) ServerMain -h 127.0.0.1 -p 9000 --sched-global rr
2) Demo1_MainProgram --program "demos.Demo1_AggregateProgram"
    -H 127.0.0.1 -P 9000 -h 127.0.0.1 -p 9001 --sched-global rr
    -e 1:2,3
3) Demo1_MainProgram --program "demos.Demo1_AggregateProgram"
    -H 127.0.0.1 -P 9000 -h 127.0.0.1 -p 9002 --sched-global rr
    -e 2;3:1

You should expect the system to stabilize with the following state

- Dev 1 => 3 (i.e., device 1 has 3 neighbors)
- Dev 2 => 1
- Dev 3 => 2


### DEMO 2: Server, Fixed Spatial Network

Run configurations:

1) Demo2_Server -h 127.0.0.1 -p 9000 --sched-global rr
2) Demo2_MainProgram --program "demos.Demo2_AggregateProgram" -P 9000 -p 9001
   --sched-global rr -e 1;3;5
3) Demo2_MainProgram --program "demos.Demo2_AggregateProgram" -P 9000 -p 9002
   --sched-global rr -e 2;4

You should expect the system to stabilize with the following state

- Dev 1 => 3 (i.e., device 1 has 3 neighbors)
- Dev 2 => 4
- Dev 3 => 5
- Dev 4 => 4
- Dev 5 => 3


### DEMO 3: Server, (Dynamic) Spatial Network, Sensors, Server GUI

Run configurations:

1) Demo3_ServerMain -h 127.0.0.1 -p 9000 --sched-global rr --servergui
2) Demo3_MainProgram --program "demos.Demo3_AggregateProgram" -P 9000 -p 9001
   --sched-global rr -e 1;3;5
3) Demo3_MainProgram --program "demos.Demo3_AggregateProgram" -P 9000 -p 9002
   --sched-global rr -e 2;4

The behavior of the system depends on how the positions of the devices will vary.


### DEMO 4: Server, Spatial Network, Sensors, Client GUIs

Run configurations:

1) Demo3_ServerMain -h 127.0.0.1 -p 9000 --sched-global rr
2) Demo4_MainProgram --program "demos.Demo3_AggregateProgram" -P 9000 -p 9001
   --sched-global rr -e 1;3 --gui
3) Demo4_MainProgram --program "demos.Demo3_AggregateProgram" -P 9000 -p 9002
   --sched-global rr -e 2;4 --gui

You should expect the system to stabilize with the following state

- Dev 1 => 3
- Dev 2 => 2
- Dev 3 => 1
- Dev 4 => 0

You can use the client GUIs to change sensor values and see how the system reacts.